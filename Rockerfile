FROM debian:jessie

RUN apt-get update

RUN apt-get install -y locales 

RUN localedef --force --inputfile=en_US --charmap=UTF-8 \
    --alias-file=/usr/share/locale/locale.alias \
    en_US.UTF-8

ENV LANG en_US.utf8

RUN mkdir /docker-entrypoint-initdb.d

ENV PG_MAJOR 9.6
ENV PGPRO_VERSION 9.6.1.2
ENV PG_SHA256 6911ba75a5dff747d8edd7d501c97dcb1d3c2a41733998f1b2332d37f9879bd0

RUN apt-get install -y \
  locales \
  build-essential \
  bison \
  flex \
  git-core \
  wget \
  curl \
  libreadline-dev \
  zlib1g-dev \
  libssl-dev \
  libedit-dev \
  g++-4.8

RUN wget -O postgresql.tar.bz2 "http://repo.postgrespro.ru/pgpro-$PG_MAJOR/src/postgrespro-$PGPRO_VERSION.tar.bz2" \
  && echo "$PG_SHA256 *postgresql.tar.bz2" | sha256sum -c - \
	&& mkdir -p /usr/src/postgresql \
	&& tar \
		--extract \
		--file postgresql.tar.bz2 \
		--directory /usr/src/postgresql \
		--strip-components 1 \
	&& rm postgresql.tar.bz2

RUN mkdir -p /pg

RUN cd /usr/src/postgresql \
	&& ./configure \
    --prefix=/pg \
		--with-openssl \
	&& make -j "$(getconf _NPROCESSORS_ONLN)" world \
	&& make install \
	&& make -C contrib install

RUN	cd /usr/src/postgresql && mkdir contrib/rum \
	&& wget -O rum.tar.gz "https://github.com/postgrespro/rum/archive/0.1.tar.gz" \
	&& tar xzf rum.tar.gz -C contrib/rum --strip-components=1 \
	&& cd contrib/rum \
	&& make -j "$(getconf _NPROCESSORS_ONLN)" install \
  && ls /usr/src/postgresql

RUN apt-get install -y python libedit-dev g++-4.8

ENV v8 5.1.281.14

RUN cd /tmp && git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git \
  && export PATH="$PATH":`pwd`/depot_tools \
  && fetch v8; cd v8 \
  && git checkout $v8 && gclient sync > /dev/null \
  && git describe --always

RUN apt-get install -y clang-3.5 llvm-3.5-dev libedit-dev
RUN ln -s /usr/bin/clang-3.5 /usr/bin/clang && ln -s /usr/bin/clang++-3.5 /usr/bin/clang++

RUN cd /tmp/v8 \
  && export CXX=/usr/bin/clang++ \
  && export LD=clang++ \
  && echo "make deps" \
  && make dependencies > /dev/null || true

RUN cd /tmp/v8 \
  && export CXX=clang++ \
  && export LD=clang++ \
  && make native library=shared -j8 werror=no snapshot=off i18nsupport=off \
  && cp -rf include/* /usr/include \
  && cp -rf include /usr/include \
  && install -v --mode=0644 out/native/lib.target/* /usr/lib \
  && install -v out/native/d8 /usr/bin/ \
  && install out/native/obj.target/tools/gyp/*.a /usr/lib 

RUN cd /usr/src/postgresql/contrib \
  && git clone https://github.com/plv8/plv8 \
  && cd plv8 \
  && git checkout e1c97ed4694b27fac2905dfa86c894f5407a9b86 \
  && export PATH=/pg/bin:$PATH \
  && make \
  && make install

RUN	cd /usr/src/postgresql/contrib \
  && git clone https://github.com/niquola/fhirpath-pg  \
	&& cd fhirpath-pg \
	&& make && make install

EXPORT /pg
EXPORT /usr/lib/libv8.so libv8.so

ENV GOSU_VERSION 1.9
RUN set -x \
    && apt-get update && apt-get install -y --no-install-recommends ca-certificates wget && rm -rf /var/lib/apt/lists/* \
    && dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')" \
    && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch" \
    && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc" \
    && export GNUPGHOME="$(mktemp -d)" \
    && gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
    && rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true \
    && apt-get purge -y --auto-remove ca-certificates wget

EXPORT /usr/local/bin/gosu  gosu

FROM debian:jessie

IMPORT /pg
IMPORT libv8.so /usr/lib/libv8.so
IMPORT gosu /usr/local/bin/gosu

RUN apt-get update

RUN apt-get install -y locales libssl1.0.0

RUN localedef --force --inputfile=en_US --charmap=UTF-8 \
    --alias-file=/usr/share/locale/locale.alias \
    en_US.UTF-8

ENV LANG en_US.utf8

RUN groupadd -r postgres --gid=999 && useradd -r -g postgres --uid=999 postgres
RUN mkdir /data && chown postgres:postgres /data

ENV PATH /pg/bin:$PATH
ENV PGDATA /data


COPY docker-entrypoint.sh /

VOLUME /data

ENTRYPOINT ["/docker-entrypoint.sh"]

EXPOSE 5432

CMD ["postgres"]

PUSH docker/aidboxdb